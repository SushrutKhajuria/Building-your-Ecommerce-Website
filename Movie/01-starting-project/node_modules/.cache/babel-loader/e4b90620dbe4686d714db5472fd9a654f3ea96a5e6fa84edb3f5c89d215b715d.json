{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91700\\\\Desktop\\\\Sushrut\\\\Sharpener\\\\FrontEnd\\\\React\\\\Building your Ecommerce Website\\\\Movie\\\\01-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const retryTimeoutRef = useRef(null);\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error('Failed to fetch');\n      }\n      if (!data.results) {\n        throw new Error('No data received');\n      }\n      const transformedMovies = data.results.map(movieData => ({\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date\n      }));\n      setMovies(transformedMovies);\n      setIsRetrying(false);\n      clearTimeout(retryTimeoutRef.current); // clear retry if successful\n    } catch (err) {\n      console.error('Fetch error:', err);\n      setError('Something went wrong... Retrying');\n      setIsRetrying(true);\n      retryTimeoutRef.current = setTimeout(fetchMoviesHandler, 5000);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  function handleFetchClick() {\n    clearTimeout(retryTimeoutRef.current);\n    setIsRetrying(false);\n    fetchMoviesHandler();\n  }\n  function handleCancelRetry() {\n    clearTimeout(retryTimeoutRef.current);\n    setIsRetrying(false);\n    setError('Retry cancelled.');\n  }\n  useEffect(() => {\n    return () => {\n      clearTimeout(retryTimeoutRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFetchClick,\n      disabled: isRetrying,\n      children: isRetrying ? 'Retrying...' : 'Fetch Movies'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), isRetrying && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCancelRetry,\n      className: \"cancel-button\",\n      children: \"Cancel Retry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }, this), !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-movies\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 31\n    }, this), !isLoading && !error && movies.length > 0 && /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 53\n    }, this), !isLoading && !error && movies.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-movies\",\n      children: \"No movies to display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"xhmNgpTcpYEm5+IpqmwDAXD1fIY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MoviesList","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","isRetrying","setIsRetrying","retryTimeoutRef","fetchMoviesHandler","response","fetch","data","json","ok","Error","results","transformedMovies","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","clearTimeout","current","err","console","setTimeout","handleFetchClick","handleCancelRetry","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/Users/91700/Desktop/Sushrut/Sharpener/FrontEnd/React/Building your Ecommerce Website/Movie/01-starting-project/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const retryTimeoutRef = useRef(null);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch');\n      }\n\n      if (!data.results) {\n        throw new Error('No data received');\n      }\n\n      const transformedMovies = data.results.map((movieData) => ({\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date,\n      }));\n\n      setMovies(transformedMovies);\n      setIsRetrying(false);\n      clearTimeout(retryTimeoutRef.current); // clear retry if successful\n    } catch (err) {\n      console.error('Fetch error:', err);\n      setError('Something went wrong... Retrying');\n      setIsRetrying(true);\n      retryTimeoutRef.current = setTimeout(fetchMoviesHandler, 5000);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  function handleFetchClick() {\n    clearTimeout(retryTimeoutRef.current);\n    setIsRetrying(false);\n    fetchMoviesHandler();\n  }\n\n  function handleCancelRetry() {\n    clearTimeout(retryTimeoutRef.current);\n    setIsRetrying(false);\n    setError('Retry cancelled.');\n  }\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(retryTimeoutRef.current);\n    };\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <button onClick={handleFetchClick} disabled={isRetrying}>\n        {isRetrying ? 'Retrying...' : 'Fetch Movies'}\n      </button>\n      {isRetrying && (\n        <button onClick={handleCancelRetry} className=\"cancel-button\">\n          Cancel Retry\n        </button>\n      )}\n\n      {isLoading && <div className=\"loader\"></div>}\n      {!isLoading && error && <p className=\"no-movies\">{error}</p>}\n      {!isLoading && !error && movies.length > 0 && <MoviesList movies={movies} />}\n      {!isLoading && !error && movies.length === 0 && (\n        <p className=\"no-movies\">No movies to display</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}